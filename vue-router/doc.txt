<div class="app" id="a1"> <h1>全局配置</h1> <table> <thead> <tr> <th>名称</th> <th>属性</th> <th>方法</th> </tr> </thead> <tbody> <tr> <td>xxxxxxxx</td> <td>xxxxxxxx</td> <td>xxxxxx</td> </tr> </tbody> </table> <pre><code class="lang-">Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改下列属性： </code></pre> <div> <div class="app" id="a2"> <h1>silent</h1> <table> <thead> <tr> <th>名称</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>silent</td> <td>Boolean</td> <td>false</td> </tr> </tbody> </table> <pre><code class="lang-">Vue.config.silent = true </code></pre> <div> <div class="app" id="a3"> <h1>optionMergeStrategies</h1> <table> <thead> <tr> <th>名称</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>silent</td> <td>Function</td> <td>{}</td> </tr> </tbody> </table> <pre><code class="lang-">Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) { return child + 1 } const Profile = Vue.extend({ _my_option: 1 }) </code></pre> <div> <div class="app" id="a4"> <h1>全局API</h1> <table> <thead> <tr> <th>名称</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>xxx</td> <td>xxxx</td> <td>xxx</td> </tr> </tbody> </table> <pre><code class="lang-">Vue.extend( options ) </code></pre> <div> <div class="app" id="a5"> <h1>Vue.extend( options )</h1> <table> <thead> <tr> <th>名称</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>Vue.extend</td> <td>{Object}</td> <td>{}</td> </tr> </tbody> </table> <pre><code class="lang-">var Profile = Vue.extend({ template: '&lt;p&gt;{{firstName}} {{lastName}} aka {{alias}}&lt;/p&gt;', data: function () { return { firstName: 'Walter', lastName: 'White', alias: 'Heisenberg' } } }) // 创建 Profile 实例，并挂载到一个元素上。 new Profile().$mount('#mount-point') </code></pre> <div> <div class="app" id="a6"> <h1>Vue.nextTick( [callback, context] )</h1> <table> <thead> <tr> <th>名称</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>Vue.nextTick</td> <td>{Function} [callback]</td> <td></td> </tr> <tr> <td>{Object} [context]</td> <td></td> <td></td> </tr> </tbody> </table> <pre><code class="lang-">vm.msg = 'Hello' // DOM 还没有更新 Vue.nextTick(function () { // DOM 更新了 }) // 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示) Vue.nextTick() .then(function () { // DOM 更新了 }) </code></pre> <div> <div class="app" id="a7"> <h1>选项 / 数据</h1> <table> <thead> <tr> <th>名称</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>xxxx</td> <td>xxxxx</td> <td>xxxxx</td> </tr> </tbody> </table> <pre><code class="lang-">选项数据 </code></pre> <div> <div class="app" id="a8"> <h1>data</h1> <table> <thead> <tr> <th>名称</th> <th>类型</th> <th>限制</th> </tr> </thead> <tbody> <tr> <td>data</td> <td>Object / Function</td> <td>组件的定义只接受 function</td> </tr> </tbody> </table> <pre><code class="lang-">var data = { a: 1 } // 直接创建一个实例 var vm = new Vue({ data: data }) vm.a // =&gt; 1 vm.$data === data // =&gt; true // Vue.extend() 中 data 必须是函数 var Component = Vue.extend({ data: function () { return { a: 1 } } }) </code></pre> <div> <div class="app" id="a9"> <h1>props</h1> <table> <thead> <tr> <th>名称</th> <th>类型</th> <th>类型</th> </tr> </thead> <tbody> <tr> <td>props</td> <td>Array<string></td> <td>Object</td> </tr> </tbody> </table> <pre><code class="lang-">Vue.component('props-demo-simple', { props: ['size', 'myMessage'] }) // 对象语法，提供校验 Vue.component('props-demo-advanced', { props: { // 检测类型 height: Number, // 检测类型 + 其他验证 age: { type: Number, default: 0, required: true, validator: function (value) { return value &gt;= 0 } } } }) </code></pre> </div>